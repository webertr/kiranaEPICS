Here is the output from:

dumpbin /exports "C:\Program Files (x86)\Specialised Imaging\Kirana\SIInstKirana1.dll"


         49    0 00096108 SIInstAbortCurrentOperation
         53    1 00095F7C SIInstArm
         37    2 0009653C SIInstBitsPerPixel
         36    3 00096588 SIInstBytesPerPixel
         18    4 00096CFC SIInstDiagPortRead
         19    5 00096CA4 SIInstDiagPortWrite
         17    6 00096D54 SIInstDiagSendCommand
         27    7 0009684C SIInstDownloadFocusImageData
         20    8 00096AF8 SIInstDownloadFrame
         28    9 000967E8 SIInstDownloadImageData
         23    A 00096994 SIInstDownloadVideo
         22    B 00096A38 SIInstDownloadVideoEx
         71    C 00095410 SIInstDriverName
         51    D 00096040 SIInstEnableFocus
         52    E 00095FE0 SIInstFire
         32    F 000966B8 SIInstFocusBitsPerPixel
         31   10 00096704 SIInstFocusBytesPerPixel
         30   11 00096750 SIInstFocusResolutionX
         29   12 0009679C SIInstFocusResolutionY
         39   13 000964A4 SIInstFrameCount
         38   14 000964F0 SIInstFramesAvail
         76   15 0009521C SIInstFreeHandle
         75   16 0009741C SIInstFreeSIIMemory
         13   17 00096F98 SIInstGetCoolerAimpoint
         59   18 00095BE8 SIInstGetDataXML
         58   19 00095CDC SIInstGetDefaultConfigXML
         57   1A 00095DA8 SIInstGetDefaultSetupXML
         25   1B 00096924 SIInstGetFocusImage
         61   1C 00095A6C SIInstGetFocusSetup
         77   1D 000951B4 SIInstGetHandle
         26   1E 000968B0 SIInstGetImage
         67   1F 00095600 SIInstGetInfo
          7   20 000972B4 SIInstGetKiranaAlias
          8   21 00097260 SIInstGetKiranaFirmwares
         68   22 00095538 SIInstGetLinkHint
         21   23 00096B68 SIInstGetLiveImage
         65   24 00095774 SIInstGetPersistentConfig
         24   25 00096BC4 SIInstGetResultsData
          6   26 00097170 SIInstGetRoundTripCount
         63   27 000958F0 SIInstGetSetup
          2   28 000973D0 SIInstGetSyncPeriod
         40   29 00096458 SIInstHeadCount
         47   2A 000961B0 SIInstIsFired
         48   2B 00096168 SIInstIsLinked
         45   2C 00096244 SIInstIsPeriscopeEngaged
         42   2D 000963C0 SIInstLastCommsErrorCode
         44   2E 0009628C SIInstLastErrorCode
         43   2F 000962D8 SIInstLastErrorMessage
         69   30 000954D8 SIInstLink
         74   31 00095264 SIInstLoadDeviceConfig
         73   32 00095314 SIInstLoadDeviceConfigFile
         41   33 0009640C SIInstProgress
         72   34 000953B4 SIInstReleaseDriver
         34   35 00096620 SIInstResolutionX
         33   36 0009666C SIInstResolutionY
         60   37 00095B48 SIInstSendDataXML
         62   38 000959CC SIInstSendFocusSetup
         66   39 000956D4 SIInstSendPersistentConfig
         64   3A 00095850 SIInstSendSetup
         16   3B 00096E3C SIInstSetAuxOut
         54   3C 00095F24 SIInstSetCaptureMode
         14   3D 00096F4C SIInstSetCoolerAimpoint
         11   3E 00097034 SIInstSetDacValue
          1   3F 00097214 SIInstSetMinPhaseOffset
          5   40 000971C8 SIInstSetPhaseOffset
         70   41 00097478 SIInstSetProgressCallback
         50   42 000960A4 SIInstSetShutter
          4   43 0009711C SIInstSetSyncMode
         15   44 00096EAC SIInstSetTriggerDelay
         56   45 00095E74 SIInstSetTriggerFunction
         55   46 00095EC4 SIInstSetTriggerInputParams
          3   47 00097388 SIInstSyncPulsesPresent
         35   48 000965D4 SIInstTriggerInputs
         46   49 000961F8 SIInstTriggerStatus
         12   4A 00096FE4 SIInstWriteDacValue
         10   4B 0009707C SIInstWriteIDACValue
          9   4C 000970CC SIInstWriteVDACValue

This is a C# console application to control a Kirana camera by Specialized Instruments. 
The application with interface with EPICS PV's via a Channel Access Client called EpicsSharp, written natively in C#.

Start with:

SIInstLink

SIInstIsLinked

Could try this one:

SIInstArm

Would this work when the software was connected? Probably not.

Could we figure out what is connected with:

SIInstGetHandle
SIInstGetInfo
SIInstGetKiranaAlias

Maybe.

Going in a new direction. Use spy++ to find the window that is open. I'm seeing things like:

+Window 002A028C "Kirana" TfrmKTestMain

And a bunch of sub windows. I think I can access these by name. Figure out what you need to click to arm or set the delay. It should be just that simple. 

Once you know the window name, check out this resource:

https://docs.microsoft.com/en-us/dotnet/framework/winforms/how-to-simulate-mouse-and-keyboard-events-in-code

Here is a sample:

// Get a handle to an application window.
[DllImport("USER32.DLL", CharSet = CharSet.Unicode)]
public static extern IntPtr FindWindow(string lpClassName,
    string lpWindowName);

// Activate an application window.
[DllImport("USER32.DLL")]
public static extern bool SetForegroundWindow(IntPtr hWnd);

// Send a series of key presses to the Calculator application.
private void button1_Click(object sender, EventArgs e)
{
    // Get a handle to the Calculator application. The window class
    // and window name were obtained using the Spy++ tool.
    IntPtr calculatorHandle = FindWindow("CalcFrame","Calculator");

    // Verify that Calculator is a running process.
    if (calculatorHandle == IntPtr.Zero)
    {
        MessageBox.Show("Calculator is not running.");
        return;
    }

    // Make Calculator the foreground application and send it 
    // a set of calculations.
    SetForegroundWindow(calculatorHandle);
    SendKeys.SendWait("111");
    SendKeys.SendWait("*");
    SendKeys.SendWait("11");
    SendKeys.SendWait("=");
}

I think you can send an enter command with:

To send a keystroke to the same application
Call the Send or SendWait method of the SendKeys class. The specified keystrokes will be received by the active control of the application. 
The following code example uses Send to simulate pressing the ENTER key when the user double-clicks the surface of the form. 
This example assumes a Form with a single Button control that has a tab index of 0.

C#

Copy
// Send a key to the button when the user double-clicks anywhere 
// on the form.
private void Form1_DoubleClick(object sender, EventArgs e)
{
    // Send the enter key to the button, which raises the click 
    // event for the button. This works because the tab stop of 
    // the button is 0.
    SendKeys.Send("{ENTER}");
}

We want to use the "SendKeys" class. 

Use SendKeys to send keystrokes and keystroke combinations to the active application. 
This class cannot be instantiated. 
To send a keystroke to a class and immediately continue with the flow of your program, use Send. 
To wait for any processes started by the keystroke, use SendWait.

To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.

ENTER is "{ENTER}" or "~"

Here is the working code:

using System;
using System.Runtime.InteropServices;


namespace kiranaEPICS
{

    class Program
    {
        // Get a handle to an application window.
        [DllImport("USER32.DLL", CharSet = CharSet.Unicode)]
        public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        // Activate an application window.
        [DllImport("USER32.DLL")]
        public static extern bool SetForegroundWindow(IntPtr hWnd);

        static void Main(string[] args)
        {
            // Get a handle to the Calculator application. The window class
            // and window name were obtained using the Spy++ tool.
            //IntPtr kiranaHandle = FindWindow("TfrmKTestMain", "Kirana");
            IntPtr kiranaHandle = FindWindow("TAboutDlg", "About");

            // Verify that Calculator is a running process.
            if (kiranaHandle == IntPtr.Zero)
            {
                System.Console.WriteLine("Did not find window");
            } else
            {
                System.Console.WriteLine("Found window");
            }

            SetForegroundWindow(kiranaHandle);

            System.Windows.Forms.SendKeys.SendWait("{ENTER}");

            System.Console.ReadKey();

            // Make Calculator the foreground application and send it 
            // a set of calculations.
            //SetForegroundWindow(calculatorHandle);
            //System.Windows.Forms.SendKeys.SendWait("111");

        }
    }
}


Now trying this:

Install TestStack.White from NuGet

PM> Install-Package TestStack.White

Did get this warning:

The names of some imported commands from the module 'TestStack.White' include unapproved verbs that might make them less discoverable. 
To find the commands with unapproved verbs, run the Import-Module command again with the Verbose parameter. 
For a list of approved verbs, type Get-Verb.

Have you looked at White TestStack?

Sample code:

Application application = Application.Launch("foo.exe");
Window window = application.GetWindow("bar", InitializeOption.NoCache);

Button button = window.Get<Button>("save");
button.Click();

I don't think it can get better than that. The library is created by ThoughtWorks.

https://stackoverflow.com/questions/1134993/control-another-application-using-c-sharp

https://github.com/TestStack/White

This TestStack White package:
https://teststackwhite.readthedocs.io/en/latest/

Search criteria:

SearchCriteria searchCriteria = SearchCriteria.ByAutomationId("name").AndControlType(typeof(TextBox)).AndIndex(2);
TextBox textBox = (TextBox) window.Get(searchCriteria);
textBox.Text = "Anil";

Is this a managed or un-managed application?

A managed application runs on the CLR, Common Language Runtime.

Is this Kirana application a managed application?

I don't think it is because it is a .exe file. I think a managed application would be in a portable execution file, .pe

Button button = window.Get<Button>("btnOK"); //<Button> acts as criteria as well as the return type
button = (Button) window.Get(SearchCriteria.ByAutomationId("btnOK").AndControlType(typeof(Button))); // same as above

For the close button, it's in the:

Class: TfrmKTestMain
Caption: Kirana

There is a minimize, maximize and close. Hmm....